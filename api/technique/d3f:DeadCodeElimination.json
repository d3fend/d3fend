{
  "def_to_off": {
    "head": {
      "vars": [
        "query_def_tech_label",
        "top_def_tech_label",
        "def_tactic_label",
        "def_tactic_rel_label",
        "def_tech_label",
        "def_artifact_rel_label",
        "def_artifact_label",
        "off_artifact_label",
        "off_artifact_rel_label",
        "off_tech_label",
        "off_tech_id",
        "off_tech_parent_label",
        "off_tech_parent_is_toplevel",
        "off_tactic_rel_label",
        "off_tactic_label",
        "def_tactic",
        "def_tactic_rel",
        "tactic_def_tech",
        "def_tech",
        "def_artifact_rel",
        "def_artifact",
        "off_artifact",
        "off_artifact_rel",
        "off_tech",
        "off_tech_parent",
        "off_tactic_rel",
        "off_tactic"
      ]
    },
    "results": {
      "bindings": []
    }
  },
  "description": {
    "@context": {
      "d3f": "http://d3fend.mitre.org/ontologies/d3fend.owl#",
      "rdfs": "http://www.w3.org/2000/01/rdf-schema#",
      "skos": "http://www.w3.org/2004/02/skos/core#",
      "owl": "http://www.w3.org/2002/07/owl#"
    },
    "@graph": [
      {
        "@id": "d3f:DeadCodeElimination",
        "@type": [
          "d3f:ApplicationHardening",
          "owl:NamedIndividual",
          "owl:Class"
        ],
        "d3f:d3fend-id": "D3-DCE",
        "d3f:definition": "Removing unreachable or \"dead code\" from compiled source code.",
        "d3f:kb-article": "## How it works\n\nDead code is code that is considered unreachable by normal program execution. Dead code can be created by adding code under a condition that never evaluates to true. Dead code should be removed since this type of code can produce unexpected results, if accidentally or maliciously forced to execute.\n\nDead code identification is typically performed by algorithms that implement program flows analysis looking for unreachable code. The dead code is eliminated by instructing compilers to remove the code through compiler flags, i.e., '-fdce' is used for Dead Code Elimination.\n\n## Considerations\n\nCode can also be deemed unreachable for certain run-time conditions. Different deployed systems and environments may contain some code that is unreachable for the given environment. This technique does not consider run-time conditions for unreachable code.",
        "d3f:kb-reference": {
          "@id": "d3f:Reference-DeadCodeElimination"
        },
        "rdfs:label": "Dead Code Elimination",
        "rdfs:subClassOf": {
          "@id": "d3f:ApplicationHardening"
        }
      }
    ]
  },
  "digital_artifacts": {
    "head": {
      "vars": [
        "query_def_tech_label",
        "top_def_tech_label",
        "def_tech_label",
        "def_artifact_rel_label",
        "def_artifact_label",
        "def_tactic",
        "def_tactic_rel",
        "def_tech",
        "def_artifact_rel",
        "def_artifact"
      ]
    },
    "results": {
      "bindings": []
    }
  },
  "references": {
    "@context": {
      "rdfs": "http://www.w3.org/2000/01/rdf-schema#",
      "d3f": "http://d3fend.mitre.org/ontologies/d3fend.owl#"
    },
    "@graph": [
      {
        "@id": "d3f:Reference-DeadCodeElimination",
        "@type": [
          "d3f:AcademicPaperReference",
          "http://www.w3.org/2002/07/owl#NamedIndividual"
        ],
        "d3f:has-link": {
          "@type": "http://www.w3.org/2001/XMLSchema#anyURI",
          "@value": "https://nebelwelt.net/files/15LangSec.pdf"
        },
        "d3f:kb-abstract": "There is a significant body of work devoted to testing, verifying, and certifying the correctness of optimizing compilers. The focus of such work is to determine if source code and optimized code have the same functional semantics. In this paper, we introduce the correctness-security gap, which arises when a compiler optimization preserves the functionality of but violates a security guarantee made by source code. We show with concrete code examples that several standard optimizations, which have been formally proved correct, inhabit this correctness-security gap. We analyze this gap and conclude that it arises due to techniques that model the state of the program but not the state of the underlying machine. We propose a broad research program whose goal is to identify, understand, and mitigate the impact of security errors introduced by compiler optimizations. Our proposal includes research in testing, program analysis, theorem proving, and the development of new, accurate machine models for reasoning about the impact of compiler optimizations on security.",
        "d3f:kb-author": "Vijay D'Silva, Mathias Payer, Dawn Song",
        "d3f:kb-organization": "Google Inc, Purdue University, UC Berkeley",
        "d3f:kb-reference-of": {
          "@id": "d3f:DeadCodeElimination"
        },
        "d3f:kb-reference-title": "The Correctness-Security Gap in Compiler Optimization",
        "d3f:reference-type-label": "Academic Paper",
        "rdfs:label": "Reference - Dead code elimination"
      }
    ]
  },
  "references_meta": {
    "Academic Paper": 1
  },
  "subtechniques": {
    "@context": {
      "d3f": "http://d3fend.mitre.org/ontologies/d3fend.owl#",
      "rdfs": "http://www.w3.org/2000/01/rdf-schema#",
      "skos": "http://www.w3.org/2004/02/skos/core#",
      "owl": "http://www.w3.org/2002/07/owl#"
    },
    "@graph": []
  },
  "related_offensive_matrix": {}
}