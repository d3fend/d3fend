{"def_to_off":{"head":{"vars":["query_def_tech_label","top_def_tech_label","def_tactic_label","def_tactic_rel_label","def_tech_label","def_artifact_rel_label","def_artifact_label","off_artifact_label","off_artifact_rel_label","off_tech_label","off_tech_id","off_tech_parent_label","off_tech_parent_is_toplevel","off_tactic_rel_label","off_tactic_label","def_tactic","def_tactic_rel","tactic_def_tech","def_tech","def_artifact_rel","def_artifact","off_artifact","off_artifact_rel","off_tech","off_tech_parent","off_tactic_rel","off_tactic"]},"results":{"bindings":[]}},"description":{"@context":{"rdfs":"http://www.w3.org/2000/01/rdf-schema#","owl":"http://www.w3.org/2002/07/owl#","d3f":"http://d3fend.mitre.org/ontologies/d3fend.owl#","skos":"http://www.w3.org/2004/02/skos/core#"},"@graph":[{"@id":"d3f:PointerAuthentication","@type":["d3f:ApplicationHardening","owl:NamedIndividual","owl:Class"],"d3f:authenticates":{"@id":"d3f:Pointer"},"d3f:d3fend-id":"D3-PAN","d3f:definition":"Comparing the cryptographic hash or derivative of a pointer's value to an expected value.","d3f:kb-article":"## How It Works\n\nPointer Authentication (frequently referred to as PAC, although the technique is properly Pointer Authentication) is a security feature to provide protection against attackers with memory read/write access.  A Pointer Authentication Code (PAC) is a cryptographic hash or derivative computed on the value of a pointer and some additional context information which can then provide a cryptographically strong guarantee about the likelihood that a pointer has been tampered with by an attacker.\n\nAlthough pointers are 64 bits, most systems have a substantially smaller virtual address space, leaving unused bits in pointers that can store the value of the PAC, this can be done to reduce memory space requirements. One implementation is in ARMv8.3-A.  A PAC is computed over the 64-bit pointer value and a 64-bit context value.  Instructions are introduced to deal with pointers: one category to compute and insert the PAC into a pointer, another category to verify the pointer and invalidate the pointer if the PAC does not check, and a third category to remove the pointer and restore the original value without verifying.\n\nThe ARM standard specifies a cryptographic algorithm called QARMA-64 (designed by Qualcomm) to compute the signature, although this algorithm is not required.  The architecture provides for five secret 128-bit Pointer Authentication keys: two for instruction pointers, two for data pointers, and a general key for signing larger blocks of data.\n\n## Considerations\n\nIn the ARM implementation, the mechanisms above for manipulating PACS are provided, but it is up to the code developer to manage the keys for the cryptographic algorithm.\n\n\nA known potential limitation of PACs concerns signing gadgets. Under certain circumstances PACs can be bypassed by forcing the system to run a signing gadget which will allow the signing of arbitrary pointers to occur.","d3f:kb-reference":[{"@id":"d3f:Reference-PointerAuthenticationOnARMv8.3"},{"@id":"d3f:Reference-PointerAuthenticationProjectZero"}],"rdfs:label":"Pointer Authentication","rdfs:subClassOf":{"@id":"d3f:ApplicationHardening"}}]},"digital_artifacts":{"head":{"vars":["query_def_tech_label","top_def_tech_label","def_tech_label","def_artifact_rel_label","def_artifact_label","def_tactic","def_tactic_rel","def_tech","def_artifact_rel","def_artifact"]},"results":{"bindings":[{"query_def_tech_label":{"type":"literal","value":"Pointer Authentication"},"top_def_tech_label":{"type":"literal","value":"Application Hardening"},"def_tech_label":{"type":"literal","value":"Pointer Authentication"},"def_artifact_rel_label":{"type":"literal","value":"authenticates"},"def_artifact_label":{"type":"literal","value":"Pointer"},"def_tactic":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#Harden"},"def_tactic_rel":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#enables"},"def_tech":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#PointerAuthentication"},"def_artifact_rel":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#authenticates"},"def_artifact":{"type":"uri","value":"http://d3fend.mitre.org/ontologies/d3fend.owl#Pointer"}}]}},"subtechniques":{"@context":{"rdfs":"http://www.w3.org/2000/01/rdf-schema#","owl":"http://www.w3.org/2002/07/owl#","d3f":"http://d3fend.mitre.org/ontologies/d3fend.owl#","skos":"http://www.w3.org/2004/02/skos/core#"},"@graph":[]},"related_offensive_matrix":{},"references":{"@context":{"rdfs":"http://www.w3.org/2000/01/rdf-schema#","d3f":"http://d3fend.mitre.org/ontologies/d3fend.owl#"},"@graph":[{"@id":"d3f:Reference-PointerAuthenticationOnARMv8.3","@type":["d3f:SpecificationReference","http://www.w3.org/2002/07/owl#NamedIndividual"],"d3f:has-link":{"@type":"http://www.w3.org/2001/XMLSchema#anyURI","@value":"https://www.qualcomm.com/media/documents/files/whitepaper-pointer-authentication-on-armv8-3.pdf"},"d3f:kb-abstract":"The pointer authentication scheme introduced by ARM is a software security primitive that makes it much harder for an attacker to modify protected pointers in memory without being detected. In this document, we will provide more details about the Pointer Authentication mechanism, provide a security analysis, and discuss the implementation of certain software security countermeasures, such as stack protection and control flow integrity, using the Pointer Authentication primitives.","d3f:kb-author":"Qualcomm Technologies, Inc","d3f:kb-organization":"Qualcomm Technologies, Inc","d3f:kb-reference-of":{"@id":"d3f:PointerAuthentication"},"d3f:kb-reference-title":"Pointer Authentication on ARMv8.3","d3f:reference-type-label":"Specification","rdfs:label":"Reference - Pointer Authentication on ARMv8.3"},{"@id":"d3f:Reference-PointerAuthenticationProjectZero","@type":["d3f:InternetArticleReference","http://www.w3.org/2002/07/owl#NamedIndividual"],"d3f:has-link":{"@type":"http://www.w3.org/2001/XMLSchema#anyURI","@value":"https://googleprojectzero.blogspot.com/2019/02/examining-pointer-authentication-on.html"},"d3f:kb-abstract":"In this post I examine Apple's implementation of Pointer Authentication on the A12 SoC used in the iPhone XS, with a focus on how Apple has improved over the ARM standard. I then demonstrate a way to use an arbitrary kernel read/write primitive to forge kernel PAC signatures for the A keys, which is sufficient to execute arbitrary code in the kernel using JOP. The technique I discovered was (mostly) fixed in iOS 12.1.3. In fact, this fix first appeared in the 16D5032a beta while my research was still ongoing.","d3f:kb-author":"Brandon Azad","d3f:kb-organization":"Project Zero, Google, Inc","d3f:kb-reference-of":{"@id":"d3f:PointerAuthentication"},"d3f:kb-reference-title":"Examining Pointer Authentication on the iPhone XS","d3f:reference-type-label":"Internet Article","rdfs:label":"Reference - Pointer Authentication Project Zero"}]},"references_meta":{"Specification":1,"Internet Article":1}}