{
  "def_to_off": {
    "head": {
      "vars": [
        "query_def_tech_label",
        "top_def_tech_label",
        "def_tactic_label",
        "def_tactic_rel_label",
        "def_tech_label",
        "def_artifact_rel_label",
        "def_artifact_label",
        "off_artifact_label",
        "off_artifact_rel_label",
        "off_tech_label",
        "off_tech_id",
        "off_tech_parent_label",
        "off_tech_parent_is_toplevel",
        "off_tactic_rel_label",
        "off_tactic_label",
        "def_tactic",
        "def_tactic_rel",
        "tactic_def_tech",
        "def_tech",
        "def_artifact_rel",
        "def_artifact",
        "off_artifact",
        "off_artifact_rel",
        "off_tech",
        "off_tech_parent",
        "off_tactic_rel",
        "off_tactic"
      ]
    },
    "results": {
      "bindings": []
    }
  },
  "description": {
    "@context": {
      "d3f": "http://d3fend.mitre.org/ontologies/d3fend.owl#",
      "rdfs": "http://www.w3.org/2000/01/rdf-schema#",
      "skos": "http://www.w3.org/2004/02/skos/core#",
      "owl": "http://www.w3.org/2002/07/owl#"
    },
    "@graph": [
      {
        "@id": "d3f:IndirectBranchCallAnalysis",
        "@type": [
          "d3f:ProcessAnalysis",
          "owl:NamedIndividual",
          "owl:Class"
        ],
        "d3f:d3fend-id": "D3-IBCA",
        "d3f:definition": "Analyzing vendor specific branch call recording in order to detect ROP style attacks.",
        "d3f:kb-article": "## How it works\n\nThis technique is used to detect an attacker attempting to exploit and execute code on a target system's call stack using return-oriented programming (ROP). Modern processors that have the ability to maintain a list of the branching calls, e.g., Intel's Last Branch Recording (LBR), can be used to track and analyze indirect branching calls that are indicative of malicious activity.\n\nIn order to reduce the number of indirect branch calls to analyze to a manageable set it is assumed that malicious ROP activity will involve the use of system calls.  The technique observes indirect branch calls that are part of paths that lead to system calls, all others are ignored. Branching calls chained together is often referred to as gadgets and gadgets are often used in ROP attacks. Indirect branch calls that involve a transfer from user-space to kernel-space are of interest for this technique.\n\nIdentification of potential ROP exploit execution includes:\n\n- Inspecting the LBR when a system function call is made\n\n  - The LBR is configured to return only instruction of interest (ret, indirect jmp, indirect calls)\n\n\n- Behavior is analyzed for\n  - Ret instructions that appear to target areas not preceded by the call sites\n  - Sequences of small code fragments that appear to be chained through the indirect branching calls (gadgets)\n\n\n- Of interest are returns that appear to not render control back after calls\n  - Typical ret-call are paired\n  - gadgets will appear to have ret followed by instruction of next instruction of the following gadget\n\n\n## Considerations\n\n* May be operating system dependent since specific system calls are used to scope branching behavoir\n* Processors need to support access to a Last Branch Recording list feature\n* The size of the LBR stack can limit the expected size of the analyzed execution stack\n* If processor does not support LBR then overhead costs for the analysis can be significant",
        "d3f:kb-reference": {
          "@id": "d3f:Reference-IndirectBranchingCalls"
        },
        "rdfs:label": "Indirect Branch Call Analysis",
        "rdfs:subClassOf": {
          "@id": "d3f:ProcessAnalysis"
        }
      }
    ]
  },
  "digital_artifacts": {
    "head": {
      "vars": [
        "query_def_tech_label",
        "top_def_tech_label",
        "def_tech_label",
        "def_artifact_rel_label",
        "def_artifact_label",
        "def_tactic",
        "def_tactic_rel",
        "def_tech",
        "def_artifact_rel",
        "def_artifact"
      ]
    },
    "results": {
      "bindings": []
    }
  },
  "references": {
    "@context": {
      "rdfs": "http://www.w3.org/2000/01/rdf-schema#",
      "d3f": "http://d3fend.mitre.org/ontologies/d3fend.owl#"
    },
    "@graph": [
      {
        "@id": "d3f:Reference-IndirectBranchingCalls",
        "@type": [
          "d3f:AcademicPaperReference",
          "http://www.w3.org/2002/07/owl#NamedIndividual"
        ],
        "d3f:has-link": {
          "@type": "http://www.w3.org/2001/XMLSchema#anyURI",
          "@value": "https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.1048.1241&rep=rep1&type=pdf"
        },
        "d3f:kb-abstract": "Return-oriented programming (ROP) has become the\nprimary exploitation technique for system compromise\nin the presence of non-executable page protections. ROP\nexploits are facilitated mainly by the lack of complete\naddress space randomization coverage or the presence\nof memory disclosure vulnerabilities, necessitating additional ROP-specific mitigations.\nIn this paper we present a practical runtime ROP exploit prevention technique for the protection of thirdparty applications. Our approach is based on the detection of abnormal control transfers that take place during\nROP code execution. This is achieved using hardware\nfeatures of commodity processors, which incur negligible runtime overhead and allow for completely transparent operation without requiring any modifications to\nthe protected applications. Our implementation for Windows 7, named kBouncer, can be selectively enabled for\ninstalled programs in the same fashion as user-friendly\nmitigation toolkits like Microsoft's EMET. The results of\nour evaluation demonstrate that kBouncer has low runtime overhead of up to 4%, when stressed with specially\ncrafted workloads that continuously trigger its core detection component, while it has negligible overhead for\nactual user applications. In our experiments with in-thewild ROP exploits, kBouncer successfully protected all\ntested applications, including Internet Explorer, Adobe\nFlash Player, and Adobe Reader.",
        "d3f:kb-author": "Vasilis Pappas, Michalis Polychronakis, Angelos D. Keromytis\nColumbia University",
        "d3f:kb-organization": "Columbia University",
        "d3f:kb-reference-of": {
          "@id": "d3f:IndirectBranchCallAnalysis"
        },
        "d3f:kb-reference-title": "Transparent ROP Exploit Mitigation using Indirect Branch Tracing",
        "d3f:reference-type-label": "Academic Paper",
        "rdfs:label": "Reference - Indirect Branching Calls"
      }
    ]
  },
  "references_meta": {
    "Academic Paper": 1
  },
  "subtechniques": {
    "@context": {
      "d3f": "http://d3fend.mitre.org/ontologies/d3fend.owl#",
      "rdfs": "http://www.w3.org/2000/01/rdf-schema#",
      "skos": "http://www.w3.org/2004/02/skos/core#",
      "owl": "http://www.w3.org/2002/07/owl#"
    },
    "@graph": []
  },
  "related_offensive_matrix": {}
}