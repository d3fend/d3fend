import{_ as a}from"./preload-helper.0HuHagjb.js";import{m as o}from"./marked.esm.a7NTqWsz.js";function p(e){return e.sort((t,r)=>t["@id"].localeCompare(r["@id"]))}function d(e){return typeof e=="string"?o(e):JSON.stringify(e)}class _{constructor(t,r){if(this.context=t["@context"],this.graph=t["@graph"],this.options={index:!1,index_key:"@id"},r&&(this.options={...this.options,...r}),this.options.index){this.index={};let s=0;this.graph.forEach(n=>{this.index[n[this.options.index_key]]=s,s++})}}get length(){return this.graph.length}i(t){let r=this.graph[this.index[t]];return r||console.error(`Graph.i(${t}) indexed lookup found no result in graph. The object may not exist in the graph.`),r}search(t,r){return this.graph.filter(n=>n[t]==r)}get(t,r){return this.graph.filter(n=>n[t]==r)[0]}get_multi_value(t,r){return this.graph.filter(n=>{if(n.hasOwnProperty(t)){let i=n[t];return typeof i=="string"?i==r:i.includes(r)}})[0]}get_multi_value_anycase(t,r){return this.graph.filter(n=>{if(n.hasOwnProperty(t)){let i=n[t];return typeof i=="string"?i.toLowerCase()==r.toLowerCase():i.map(l=>l.toLowerCase()).includes(r.toLowerCase())}})[0]}get_and_cache(t,r){let s=this.graph.filter(n=>n[t]==r);return this.current_node=s[0],this.current_node}get_cached(){return this.current_node}get_by_type(t){return this.graph.filter(s=>s["@type"].includes(t))}get_all_values(t){let r=[];return this.graph.forEach(s=>{s.hasOwnProperty(t)&&(typeof s[t]=="string"?r.push(s[t]):r.push(...s[t]))}),r}get_sorted_nodes(t){var r=new Intl.Collator([],{numeric:!0});return this.graph.toSorted((s,n)=>r.compare(s[t],n[t]))}}class g{constructor(){this.unique_edges=new Set}edge_is_unique(t,r,s){let n=`${t}${r}${s}`;return this.unique_edges.has(n)?!1:(this.unique_edges.add(n),!0)}reset(){this.unique_edges.clear()}}function b(e){let t="https://attack.mitre.org/techniques";if(e.includes(".")){let r=e.split(".")[0],s=e.split(".")[1];return`${t}/${r}/${s}/`}else return`${t}/${e}/`}function m(e){return`/offensive-technique/attack/${e}/`}function k(e){return`https://attack.mitre.org/mitigations/${e}/`}function w(e){return`/weakness/cwe/${e}`}function x(e){return`https://cwe.mitre.org/data/definitions/${e.split("-")[1]}.html`}function y(e){return"d3f:"+e.split("#")[1]}function $(e){let t;if(e.includes("#")){let r=e.split("#").length;t=e.split("#")[r-1]}else if(e.includes(":")){let r=e.split(":").length;t=e.split(":")[r-1]}return t}function u(e,t){let r=new RegExp(t+"$");return e.replace(r,"")}function f(e,t){let r=new RegExp("^"+t);return e.replace(r,"")}function O(e,t){let r=u(e,t);return f(r,t)}function q(e){return e==null?"":e.hasOwnProperty("rdfs:label")?e["rdfs:label"]:(console.debug(e),console.debug("item has no label: "+e),"no rdfs:label found")}function v(e){return e.hasOwnProperty("skos:altLabel")?[].concat(e["skos:altLabel"]).join(" "):e.hasOwnProperty("d3f:synonym")?[].concat(e["d3f:synonym"]).join(" "):""}function E(e){navigator.clipboard.writeText(e)}function P(e,t){return e.length==t.length&&e.every(function(r,s){return r===t[s]})}async function C(e){const t=Object.assign({"/src/blog_posts/2023/getting-d3fend-to-1.0.d3md":()=>a(()=>import("./getting-d3fend-to-1.0.Pc4WM2zH.js"),__vite__mapDeps([0,1,2,3,4,5,6,7,8,9,10,11,12]),import.meta.url)});let r=!1,s,n="";for(const[i,l]of Object.entries(t))if(i.endsWith(`${e}.d3md`)){r=!0,s=l,n=i;break}if(r){const i=await s();let l=i.metadata;return i.default,l.url=n,i}return error(404,"Requested File Does Not Exist")}export{_ as G,g as T,q as a,v as b,p as c,k as d,y as e,m as f,C as g,b as h,$ as i,P as j,w as k,f as l,x as m,d as n,E as o,O as s};
function __vite__mapDeps(indexes) {
  if (!__vite__mapDeps.viteFileDeps) {
    __vite__mapDeps.viteFileDeps = ["./getting-d3fend-to-1.0.Pc4WM2zH.js","./scheduler.rYb7pZZG.js","./index.DuGWJhq4.js","./spread.rEx3vLA9.js","./each.shjUScpc.js","./mermaid-934d9bea.wrqEb76i.js","./preload-helper.0HuHagjb.js","./_commonjsHelpers.4gQjN7DL.js","./_isIterateeCall.03Oh5qSM.js","./_getTag.fqMjzXJY.js","./isArray.or_6N2st.js","./isEmpty.BYHihMwR.js","../assets/getting-d3fend-to-1.EvQb52Dn.css"]
  }
  return indexes.map((i) => __vite__mapDeps.viteFileDeps[i])
}
